-- @nsURI UmlMM=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI UmlTypesMM=http://www.eclipse.org/
-- @nsURI NegocioMM=http://negocio/1.0


module negocio2uml;
create uml: UmlMM from negocio: NegocioMM;

rule Negocio2Class {
	from
		n: NegocioMM!Negocio
	to
		umlClassNegocioConcrete: UmlMM!Class (
			name <- n.nombre,
			package <- negocioPkg,
			superClass <- umlClassNegocio,
			ownedAttribute <- Sequence{umlNombreNegocio}
		),
		umlNombreNegocio: UmlMM!Property (
			name <- 'nombre',
			type <- umlStringType
		),
		negocioPkg: UmlMM!Package (
			name <- n.nombre.toLower()
		),
		commonsPkg: UmlMM!Package (
			name <- 'commons'
		),
		umlClassNegocio: UmlMM!Class (
			name <- 'Negocio',
			package <- commonsPkg
		),
		umlClassPersonaJuridica: UmlMM!Class (
			name <- 'PersonaJuridica',
			package <- commonsPkg
		),
		umlClassPersonaFisica: UmlMM!Class (
			name <- 'PersonaFisica',
			package <- commonsPkg
		),
		umlClassProducto: UmlMM!Class (
			name <- 'Producto',
			package <- commonsPkg,
			ownedAttribute <- Sequence{umlPrecioProductoAttribute,
						umlStockProductoAttribute,
						umlStockMinProductoAttribute}
		),
		umlStockProductoAttribute: UmlMM!Property (
			name <- 'stock',
			type <- umlIntegerType
		),
		umlStockMinProductoAttribute: UmlMM!Property (
			name <- 'stockMin',
			type <- umlIntegerType
		),
		umlPrecioProductoAttribute: UmlMM!Property (
			name <- 'precio',
			type <- umlMoneyType
		),
		primitivesPkg: UmlMM!Package (
			name <- 'primitives'
		),
		umlIntegerType: UmlMM!DataType (
			name <- 'Integer',
			package <- primitivesPkg
		),
		umlStringType: UmlMM!DataType (
			name <- 'String',
			package <- primitivesPkg
		),
		umlMoneyType: UmlMM!DataType (
			name <- 'Money',
			package <- primitivesPkg
		),
		umlDateType: UmlMM!DataType (
			name <- 'Date',
			package <- primitivesPkg
		)
}

rule Producto2Class {
	from
		nProducto: NegocioMM!Producto
	to
		umlClassProducto: UmlMM!Class (
			name <- nProducto.nombre,
			superClass <- thisModule -> resolveTemp(nProducto.negocio,
					'umlClassProducto'),
			package <- thisModule -> resolveTemp(nProducto.negocio, 'negocioPkg')
		),
		umlAssociationProductos: UmlMM!Association (
			--ownedEnd <- thisModule -> resolveTemp(nProducto.negocio,
					-- 'umlClassNegocioConcrete')
			--,
			memberEnd <- Sequence{umlPropertyNegocio,
						umlPropertyProductos},
			navigableOwnedEnd <- Sequence{umlPropertyNegocio,
						umlPropertyProductos},
			package <- thisModule -> resolveTemp(nProducto.negocio, 'negocioPkg'),
			name <- nProducto.negocio.nombre.toLower() + '_' + nProducto.nombre.toLower()
					+ 's'
		),
		umlPropertyNegocio: UmlMM!Property (
			name <- nProducto.negocio.nombre.toLower(),
			association <- umlAssociationProductos,
			type <- nProducto.negocio,
			upper <- -1,
			lower <- 0
		),
		umlPropertyProductos: UmlMM!Property (
			name <- nProducto.nombre.toLower() + 's',
			association <- umlAssociationProductos,
			type <- umlClassProducto,
			aggregation <- #composite,
			upper <- 1,
			lower <- 1
		)
}

rule PersonaFisica2Class {
	from
		nPersonaFisica: NegocioMM!Persona (
			nPersonaFisica.tipo = #FISICA
		)
	to
		umlClassPersonaFisica: UmlMM!Class (
			name <- nPersonaFisica.nombre,
			superClass <- thisModule -> resolveTemp(nPersonaFisica.negocio,
					'umlClassPersonaFisica'),
			package <- thisModule -> resolveTemp(nPersonaFisica.negocio, 'negocioPkg')
		) --,
		--aPersonaFisica: UmlMM!Association (
			--ownedEnd <- nPersonaFisica.negocio,
			--memberEnd <- nPersonaFisica
		--)
	
}

rule PersonaJuridica2Class {
	from
		nPersonaJuridica: NegocioMM!Persona (
			nPersonaJuridica.tipo = #JURIDICA
		)
	to
		umlClassPersonaJuridica: UmlMM!Class (
			name <- nPersonaJuridica.nombre,
			superClass <- thisModule -> resolveTemp(nPersonaJuridica.negocio,
					'umlClassPersonaJuridica'),
			package <- thisModule -> resolveTemp(nPersonaJuridica.negocio, 'negocioPkg')
		)
}
